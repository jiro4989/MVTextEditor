/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */
buildscript {
  ext.javafx_version = '16'
  ext.jackson_version = '2.11.0'
  ext.junit_jupiter_version = '5.6.2'

  repositories {
    mavenCentral()
    maven {
      setUrl("https://plugins.gradle.org/m2/")
    }
  }
  dependencies {
    classpath "org.openjfx:javafx-plugin:0.0.8"

    // Code Format
    classpath "com.diffplug.spotless:spotless-plugin-gradle:6.22.0"
  }
}

plugins {
  // Apply the java plugin to add support for Java
  id 'java'

  // Apply the application plugin to add support for building a CLI application.
  id 'application'

  id 'jacoco'
}

apply plugin: 'org.openjfx.javafxplugin'
apply plugin: "com.diffplug.spotless"
apply plugin: "groovy"

repositories {
  mavenCentral()
}

dependencies {
  implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'

  // JavaFX
  implementation group: 'org.openjfx', name: 'javafx-fxml', version: javafx_version
  implementation group: 'org.openjfx', name: 'javafx-base', version: javafx_version
  implementation group: 'org.openjfx', name: 'javafx-controls', version: javafx_version
  implementation group: 'org.openjfx', name: 'javafx-graphics', version: javafx_version
  implementation group: 'org.openjfx', name: 'javafx-swing', version: javafx_version

  // Jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jackson_version
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version

  // Test framework
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_jupiter_version
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_jupiter_version
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit_jupiter_version
  testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.10.1'
  testImplementation group: 'org.testfx', name: 'testfx-junit5', version: '4.0.17'
}

sourceCompatibility = 16
targetCompatibility = 16

application {
  getMainClass().set('com.jiro4989.mvte.Main')
}

compileJava {
  options.encoding = 'UTF-8'
}

javafx {
  modules = [
    'javafx.controls',
    'javafx.fxml',
    'javafx.swing'
  ]
}

jar {
  manifest {
    attributes 'Main-Class': 'com.jiro4989.mvte.Main'
  }

  archiveBaseName = 'mvte'

  from {
    configurations.compileClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }

  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
  useJUnitPlatform()
  jacoco {
    destinationFile = file("${buildDir}/jacoco/test.exec")
  }
  finalizedBy jacocoTestReport
}

task junitPlatformJacocoReport(type: JacocoReport) {
  sourceSets sourceSets.main
  executionData test
}

jacocoTestReport {
  reports {
    xml.required = true
    html.required = true
  }
}

version = 'dev'
if (project.hasProperty('CI_VERSION')) {
  version = CI_VERSION
}
def commitHash = 'dev'
if (project.hasProperty('CI_COMMIT_HASH')) {
  commitHash = CI_COMMIT_HASH
}

def VERSION_JAVA_FILE = 'Version.java'
def SRC_FILE = 'template/' + VERSION_JAVA_FILE

def DST_DIR = 'src/main/java/com/jiro4989/mvte'
def DST_FILE = DST_DIR + '/' + VERSION_JAVA_FILE

// Version.javaにバージョン番号とコミットハッシュを埋め込んでコピーする。
//
// 環境変数を指定せずにビルドするとdevがデフォルトでセットされる。
// CIでのビルド時にはタグ番号とコミットハッシュが埋め込まれる。
// こうすることでタグ番号の二重管理を防ぐことができる。
task versionSet(type: Copy) {
  doFirst {
    delete DST_FILE
  }
  from SRC_FILE
  into DST_DIR
  expand(version: version, commitHash: commitHash)
}

spotless {
  java {
    googleJavaFormat('1.13.0')

    trimTrailingWhitespace()
    endWithNewline()
    removeUnusedImports()
  }

  groovyGradle {
    target '*.gradle'
    greclipse().configFile("$rootDir/greclipse.properties")
  }
}

// 実行順序の明示
// clean -> spotlessApply (code format) -> [ versionSet -> compileJava | test ]
spotlessApply.dependsOn(['clean'])
versionSet.dependsOn(['spotlessApply'])
test.dependsOn('spotlessApply')
compileJava.dependsOn(['versionSet'])

def libDir = './lib'

task clearDependencies {
  delete libDir
}

// dependenciesで取得したjarファイルをlib配下にコピーする。
//
// runAppで実行するときにライブラリのパスを指定するために使用する。
task dumpDependencies(dependsOn: clearDependencies) {
  doLast {
    configurations.compileClasspath.each {
      def jarFile = it.absolutePath
      copy {
        from jarFile
        into libDir
      }
    }
  }
}

def appMods = [
  'javafx.base',
  'javafx.controls',
  'javafx.swing',
  'javafx.graphics',
  'javafx.fxml',
]

task runApp(type: Exec, dependsOn: dumpDependencies) {
  commandLine 'java',
    '--module-path', libDir,
    '--add-modules', appMods.join(','),
    '-jar', 'build/libs/mvte-dev.jar'
}

def jmodsDir = './jmods/javafx-jmods-11.0.2'
def customJREDir = 'jre'

if (project.hasProperty('CI_JMODS_DIR')) {
  jmodsDir = CI_JMODS_DIR
}

task clearCustomJRE {
  delete customJREDir
}

// カスタムJREを作成する。
task jlink(type: Exec, dependsOn: clearCustomJRE) {
  commandLine 'jlink',
    '--module-path', jmodsDir,
    '--add-modules', appMods.join(','),
    '--compress=2',
    '--output', customJREDir
}
